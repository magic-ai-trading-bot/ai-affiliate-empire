; ============================================================================
; PgBouncer Configuration for AI Affiliate Empire
; ============================================================================
; Purpose: Connection pooling and resource management
; Deployment: Run alongside PostgreSQL (Docker container or systemd service)
; Performance: Reduces connection overhead, improves concurrency
; ============================================================================

[databases]
; Database connection strings
; Format: dbname = host=hostname port=port dbname=dbname
ai_affiliate_empire = host=localhost port=5432 dbname=ai_affiliate_empire

; Fallback/test database
* = host=localhost port=5432

[pgbouncer]
; ============================================================================
; Connection Settings
; ============================================================================

; Listen on all interfaces (use 127.0.0.1 for localhost only)
listen_addr = 0.0.0.0
listen_port = 6432

; Unix socket (optional, for local connections)
unix_socket_dir = /var/run/postgresql
unix_socket_mode = 0777

; ============================================================================
; Authentication
; ============================================================================

; Authentication type
; Options: trust, plain, md5, scram-sha-256, cert, hba, pam
auth_type = scram-sha-256

; Authentication file (userlist.txt format: "username" "password")
auth_file = /etc/pgbouncer/userlist.txt

; HBA config file (if using auth_type = hba)
; auth_hba_file = /etc/pgbouncer/pg_hba.conf

; ============================================================================
; Pool Settings - OPTIMIZED FOR NESTJS + TEMPORAL
; ============================================================================

; Pool mode
; - session: Connection reused after client disconnects (default)
; - transaction: Connection returned after transaction (RECOMMENDED)
; - statement: Connection returned after each statement (dangerous)
pool_mode = transaction

; Maximum connections per user/database
; Formula: max_client_conn = (CPU cores * 2) + effective_spindle_count
; For 4-core server: 4 * 2 + 1 = 9, round up to 20 for NestJS async operations
max_client_conn = 200

; Default pool size (connections to PostgreSQL)
; Rule: CPU cores * 2-4 for OLTP workloads
; For 4-core: 16-20 connections
; For 8-core: 32-40 connections
default_pool_size = 20

; Minimum pool size (keep warm connections)
min_pool_size = 5

; Reserve pool (extra connections for sudden spikes)
reserve_pool_size = 10

; Maximum DB connections per pool
; Should be <= PostgreSQL max_connections
; PostgreSQL default: 100, recommended: 200
max_db_connections = 100

; Maximum user connections
max_user_connections = 50

; ============================================================================
; Timeouts
; ============================================================================

; Server idle timeout (close unused server connections after N seconds)
; Default: 600s (10 min)
server_idle_timeout = 600

; Server connection lifetime (force reconnect after N seconds)
; Helps with load balancing and preventing stale connections
; Default: 3600s (1 hour)
server_lifetime = 3600

; Server connect timeout (timeout for connecting to PostgreSQL)
; Default: 15s
server_connect_timeout = 15

; Client idle timeout (disconnect idle clients)
; Default: 0 (disabled)
client_idle_timeout = 300

; Client login timeout (timeout for client authentication)
; Default: 60s
client_login_timeout = 60

; Query timeout (cancel queries running longer than N seconds)
; Default: 0 (disabled), set to prevent runaway queries
; 0 = disabled, use PostgreSQL's statement_timeout instead
query_timeout = 0

; Query wait timeout (max time queries can wait for connection)
; Default: 120s
query_wait_timeout = 120

; ============================================================================
; Performance Tuning
; ============================================================================

; Use SO_REUSEPORT for better multi-core performance
; Linux 3.9+, requires pgbouncer 1.9+
so_reuseport = 1

; Maximum prepared statements per connection
; Default: 0 (disabled)
; Enable for Prisma/TypeORM: 100-200
max_prepared_statements = 100

; TCP keepalive settings
; Default: tcpkeepalive = yes, tcp_keepalive = 7200, tcp_keepidle = 0, tcp_keepintvl = 0
tcp_keepalive = 1
tcp_keepidle = 60
tcp_keepintvl = 10
tcp_keepcnt = 5

; TCP socket options
tcp_socket_buffer = 0
tcp_defer_accept = 1

; Application name (visible in pg_stat_activity)
application_name_add_host = 1

; ============================================================================
; Logging
; ============================================================================

; Log level
; Options: debug, info, warning, error
log_level = info

; Log file location
logfile = /var/log/pgbouncer/pgbouncer.log

; Log connections and disconnections
log_connections = 1
log_disconnections = 1

; Log pooler errors
log_pooler_errors = 1

; Log stats (write stats to log every N seconds)
stats_period = 60

; Syslog integration
; syslog = 0
; syslog_facility = daemon
; syslog_ident = pgbouncer

; ============================================================================
; Admin Settings
; ============================================================================

; Admin users (comma-separated, must exist in auth_file)
admin_users = postgres, pgbouncer_admin

; Stats users (read-only access to stats)
stats_users = stats, monitoring

; ============================================================================
; Security
; ============================================================================

; Disable dangerous commands
disable_pqexec = 0

; Ignore startup parameters from clients
; Comma-separated list: extra_float_digits, etc.
ignore_startup_parameters = extra_float_digits, options

; Server TLS settings (connect to PostgreSQL with SSL)
; server_tls_sslmode = prefer
; server_tls_ca_file = /etc/ssl/certs/ca-certificates.crt
; server_tls_cert_file = /etc/pgbouncer/server-cert.pem
; server_tls_key_file = /etc/pgbouncer/server-key.pem

; Client TLS settings (accept client connections with SSL)
; client_tls_sslmode = prefer
; client_tls_ca_file = /etc/ssl/certs/ca-certificates.crt
; client_tls_cert_file = /etc/pgbouncer/client-cert.pem
; client_tls_key_file = /etc/pgbouncer/client-key.pem

; ============================================================================
; Advanced Settings
; ============================================================================

; DNS lookup caching (seconds)
; 0 = disabled, recommended: 15-30
dns_max_ttl = 15
dns_nxdomain_ttl = 15

; DNS lookup zone
; dns_zone_check_period = 0

; Reject new connections when reaching max_client_conn
; Options: 0 (wait), 1 (reject immediately)
reserve_pool_timeout = 5

; Suspend pooler when reaching max_db_connections
; server_reset_query = DISCARD ALL
; server_reset_query_always = 0

; Server check query (sent before giving connection to client)
; Helps detect broken connections
server_check_query = SELECT 1
server_check_delay = 30

; ============================================================================
; Monitoring & Stats
; ============================================================================

; Enable internal stats
; Access via: psql -h 127.0.0.1 -p 6432 -U pgbouncer_admin pgbouncer
; Commands: SHOW STATS, SHOW POOLS, SHOW DATABASES, SHOW CLIENTS, SHOW SERVERS

; Stats tracking
track_extra_parameters = all

; ============================================================================
; NOTES
; ============================================================================
; 1. Connection string in NestJS/Prisma:
;    DATABASE_URL="postgresql://user:pass@localhost:6432/ai_affiliate_empire?pgbouncer=true"
;
; 2. Monitor pools:
;    psql -h localhost -p 6432 -U pgbouncer_admin pgbouncer -c "SHOW POOLS"
;
; 3. Reload config without restart:
;    psql -h localhost -p 6432 -U pgbouncer_admin pgbouncer -c "RELOAD"
;
; 4. Optimal pool size formula:
;    default_pool_size = number_of_cpu_cores * 2-4
;    max_client_conn = default_pool_size * 10-20
;
; 5. Transaction mode limitations:
;    - No LISTEN/NOTIFY support
;    - No temp tables across transactions
;    - No prepared statements across transactions (unless max_prepared_statements > 0)
;    - No WITH HOLD cursors
;
; 6. Docker deployment:
;    docker run -d --name pgbouncer \
;      -p 6432:6432 \
;      -v $(pwd)/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini \
;      -v $(pwd)/userlist.txt:/etc/pgbouncer/userlist.txt \
;      pgbouncer/pgbouncer:latest
;
; 7. Systemd service:
;    sudo systemctl enable pgbouncer
;    sudo systemctl start pgbouncer
;    sudo systemctl status pgbouncer
; ============================================================================
