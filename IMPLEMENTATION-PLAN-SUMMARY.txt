================================================================================
IMPLEMENTATION PLAN CREATED: Video Composition with FFmpeg
================================================================================

Date: 2025-11-01
Status: ‚úÖ READY FOR IMPLEMENTATION
Priority: CRITICAL (Blocks autonomous video generation)

================================================================================
üìã PLAN DOCUMENTS CREATED (4 files, 76 KB, 2,328 lines)
================================================================================

1. MAIN IMPLEMENTATION PLAN (44 KB, 1,367 lines)
   File: /plans/251101-video-composition-ffmpeg-plan.md

   Complete reference guide with:
   - Full requirements (functional + non-functional)
   - Detailed architecture & system design
   - 6-phase implementation (Days 1-10)
   - FFmpeg command strategies
   - 4 new services + VideoComposerService updates
   - File create/update checklist
   - Testing strategy (unit 85%, integration 70%, E2E 60%)
   - Error handling & recovery
   - Security considerations
   - Performance optimization
   - Risk & mitigation matrix
   - Success metrics
   - 60+ TODO tasks
   - 6 unresolved questions

2. EXECUTIVE SUMMARY (8 KB, 254 lines)
   File: /plans/251101-video-composition-summary.md

   Quick overview with:
   - Overview & scope
   - Key components (4 new services)
   - FFmpeg command examples
   - Phase breakdown
   - Performance targets
   - Testing coverage
   - Architectural decisions
   - Risks & mitigations

3. QUICK START GUIDE (12 KB, 388 lines)
   File: /plans/FFMPEG-QUICK-START.md

   Developer reference with:
   - FFmpeg installation (macOS/Linux/Docker)
   - 5 core FFmpeg commands
   - TypeScript service templates
   - Implementation checklist
   - Testing templates
   - Environment variables
   - Debugging tips & common issues
   - Performance tips
   - Resource links

4. NAVIGATION INDEX (12 KB, 319 lines)
   File: /plans/VIDEO-COMPOSITION-INDEX.md

   Documentation guide with:
   - Plan document navigation
   - Quick links for different roles (PM/Dev/Architect)
   - Timeline & deliverables
   - Architecture overview
   - Success criteria
   - Next steps
   - Key insights

================================================================================
üéØ SCOPE & OBJECTIVES
================================================================================

Current Status (from docs/reports/DOCUMENTATION-ACCURACY-AUDIT.md):
- ElevenLabs voice synthesis: ‚úÖ WORKING
- Pika Labs video generation: ‚úÖ WORKING
- Video composition: ‚ùå TODO (CRITICAL BLOCKER)
- Thumbnail generation: ‚ùå TODO
- Caption/watermark: ‚ùå TODO (Phase 2)

Solution: Implement complete video composition pipeline using FFmpeg

Requirements:
‚úÖ Combine voice audio + video visuals ‚Üí MP4
‚úÖ Format for social media: 1080x1920 (9:16), H.264, AAC
‚úÖ Duration: ‚â§60 seconds with audio sync
‚úÖ Thumbnails: 1024x1024 PNG with text overlay
‚úÖ Batch processing: Support 5 parallel compositions
‚úÖ Progress tracking: Real-time monitoring
‚úÖ Error recovery: Graceful degradation + retry logic
‚úÖ Testing: 80%+ coverage (unit, integration, E2E)

Impact: Unblocks autonomous video generation ‚Üí Enables multi-platform publishing ‚Üí Critical to $10k+/month revenue target

================================================================================
üèóÔ∏è ARCHITECTURE
================================================================================

4 NEW SERVICES (1,300+ lines):

1. FFmpegService (250 lines)
   - Type-safe FFmpeg CLI wrapper
   - Commands: compose, extract frame, scale, add text
   - Progress parsing from ffmpeg output
   - Custom error mapping
   - Timeout handling (60s max)

2. FileStorageService (200 lines)
   - Download remote files (with retry)
   - Upload to S3/CDN
   - Temp directory management
   - File validation (type, size)
   - Cleanup scheduler

3. ProgressTrackerService (120 lines)
   - Event emitter for real-time progress
   - Observable-based subscriptions
   - Progress history tracking
   - Timeout detection

4. ThumbnailGeneratorService (180 lines)
   - Frame extraction (FFmpeg)
   - Text overlay rendering
   - Image scaling/padding
   - DALL-E 3 fallback (Phase 2)

UPDATED SERVICES:

5. VideoComposerService (updated)
   - Replace TODO stubs with real implementation
   - Orchestrate composition pipeline
   - Handle audio/video sync
   - Support batch processing

================================================================================
‚öôÔ∏è FFmpeg Command Strategy
================================================================================

COMPOSITION COMMAND (Merge Audio + Video):
```
ffmpeg \
  -i voice.mp3 -i visuals.mp4 \
  -vf "scale=1080:1920:force_original_aspect_ratio=decrease,
        pad=1080:1920:(ow-iw)/2:(oh-ih)/2" \
  -r 30 -c:v libx264 -preset fast -crf 20 -b:v 7000k \
  -c:a aac -b:a 160k \
  -af "aformat=channel_layouts=stereo,loudnorm=I=-16:TP=-1.5:LRA=11" \
  -movflags +faststart -shortest -y output.mp4
```

Key Parameters:
- vf scale=... ‚Üí 1080x1920 (9:16) with black letterbox
- preset fast ‚Üí 20s encoding time
- crf 20 ‚Üí High quality (18-20 for social)
- b:v 7000k ‚Üí 7 Mbps bitrate
- af loudnorm ‚Üí Normalize audio to platform standard
- shortest ‚Üí Stop at shortest stream (no padding)

Output: Valid MP4, H.264 video, AAC audio, 30fps, 6-8 Mbps

THUMBNAIL EXTRACTION (Frame + Text):
```
ffmpeg -i input.mp4 -ss 00:00:30 -vframes 1 \
  -vf "scale=1024:1024,pad=1024:1024:color=white,
        drawtext=text='ProductName':..." output.png
```

================================================================================
üìÖ IMPLEMENTATION TIMELINE
================================================================================

PHASE 1: Foundation (Days 1-2, 6-8 hours)
‚úì Install FFmpeg binary & create wrapper
‚úì Create FileStorageService (download/upload/cleanup)
‚úì Create ProgressTrackerService (event emitter)
‚úì Unit tests (80%+ coverage)
Milestone: FFmpeg wrapper ready, services integrated

PHASE 2: Video Composition (Days 2-4, 12-16 hours)
‚úì Implement VideoComposerService.compose()
‚úì Handle audio/video sync (padding, trimming)
‚úì Implement batch processing (p-queue, 5 parallel)
‚úì Integration tests
Milestone: Full composition pipeline working

PHASE 3: Thumbnail Generation (Days 4-5, 6-8 hours)
‚úì Create ThumbnailGeneratorService
‚úì Frame extraction + text overlay
‚úì DALL-E 3 fallback (optional Phase 2)
‚úì Integration tests
Milestone: Thumbnails generated for all videos

PHASE 4: Error Handling (Days 5-6, 6-8 hours)
‚úì Custom error classes
‚úì Retry logic (exponential backoff)
‚úì Graceful degradation
‚úì Cleanup on all code paths
Milestone: Robust error recovery

PHASE 5: Testing & Validation (Days 6-7, 8-10 hours)
‚úì Unit tests: 85%+ coverage
‚úì Integration tests: 70%+ coverage
‚úì E2E tests: 60%+ coverage
‚úì Performance benchmarks
Milestone: All tests passing, 80%+ coverage

PHASE 6: Deployment & Documentation (Days 7-10, 4-6 hours)
‚úì Update Dockerfile (ffmpeg installation)
‚úì Environment configuration
‚úì Comprehensive documentation
‚úì Codebase summary updates
Milestone: Production-ready deployment

TOTAL: 20-40 hours | 7-10 days

================================================================================
üìä DELIVERABLES
================================================================================

CODE (1,700+ lines):
- 4 new services (750 lines)
- 1 updated service (100 lines)
- Custom error classes (50 lines)
- Unit tests (400 lines)
- Integration tests (300 lines)
- Documentation (100 lines)

TESTS (80%+ coverage):
- Unit: 85%+ (FFmpeg, storage, progress, thumbnails)
- Integration: 70%+ (workflows, file ops, DB)
- E2E: 60%+ (API endpoints, WebSocket)

DOCUMENTATION:
- Quick start guide
- API reference
- Troubleshooting guide
- Setup instructions
- Deployment guide

PERFORMANCE TARGETS:
- Single composition: <30s
- Thumbnail generation: <5s
- Batch (5 parallel): <35s
- Memory per process: <500MB
- Temp disk usage: <2GB
- Success rate: 99%+

================================================================================
‚úÖ SUCCESS CRITERIA
================================================================================

FUNCTIONAL:
‚úì 99%+ videos successfully composed
‚úì 1080x1920 (9:16), H.264, AAC codec
‚úì ‚â§60s duration with audio sync <0.1s
‚úì 1024x1024 PNG thumbnails with text
‚úì Batch processing handles 5 parallel
‚úì 100% temp file cleanup

PERFORMANCE:
‚úì Composition: <30s per video
‚úì Thumbnail: <5s per image
‚úì Batch: <35s for 5 videos
‚úì Memory: <500MB per process
‚úì Disk: <2GB temp space

QUALITY:
‚úì 80%+ test coverage (unit + integration + E2E)
‚úì Zero data loss on failures
‚úì Comprehensive error logging
‚úì Error recovery working

================================================================================
üîë KEY DECISIONS
================================================================================

1. FFmpeg Library: fluent-ffmpeg vs child_process
   Decision: fluent-ffmpeg (lighter weight, more reliable, less code)

2. Concurrency: Parallel video processing limit
   Decision: 5 parallel (matches project targets, balanced CPU/memory)

3. Storage: S3/CDN vs local
   Decision: Support both (S3 prod, local dev), abstracted interface

4. Thumbnails: Extract frame vs AI generation
   Decision: Extract frame primary, DALL-E 3 fallback (Phase 2)

5. Error Strategy: Retry vs fail fast
   Decision: Recoverable errors retry with backoff, permanent errors fail fast

================================================================================
üì¶ DEPENDENCIES TO ADD
================================================================================

REQUIRED:
- fluent-ffmpeg (v2.1.3+) - FFmpeg wrapper
- p-queue (v7.3.0+) - Concurrency control

OPTIONAL:
- sharp (v0.32.0+) - Fast image processing (fallback)

SYSTEM:
- FFmpeg binary (v4.4+)
- 2-5GB temp disk space
- 2GB+ RAM minimum
- Modern multi-core CPU

================================================================================
üöÄ HOW TO USE THESE PLANS
================================================================================

FOR PROJECT MANAGERS:
1. Read: Executive Summary (5 min)
2. Review: Timeline & deliverables
3. Track: TODO checklist in main plan
4. Status: Weekly progress against phases

FOR DEVELOPERS (Implementation):
1. Read: Quick Start Guide (10 min)
2. Install: FFmpeg binary
3. Study: FFmpeg commands section
4. Code: Follow Phase 1 checklist
5. Reference: Service templates in Quick Start
6. Test: Unit test templates provided

FOR ARCHITECTS:
1. Review: Architecture section (main plan)
2. Evaluate: Component responsibilities
3. Assess: FFmpeg command strategy
4. Check: Security considerations
5. Validate: Performance targets & testing

FOR DEBUGGING:
1. Check: Quick Start debugging section
2. Use: Common issues & solutions
3. Reference: FFmpeg command examples
4. Run: Manual test commands

================================================================================
üìÇ FILE LOCATIONS
================================================================================

MAIN PLANS:
- /plans/251101-video-composition-ffmpeg-plan.md (44 KB) ‚Üê MAIN REFERENCE
- /plans/251101-video-composition-summary.md (8 KB)
- /plans/FFMPEG-QUICK-START.md (12 KB) ‚Üê QUICK REFERENCE
- /plans/VIDEO-COMPOSITION-INDEX.md (12 KB) ‚Üê NAVIGATION

CURRENT CODE:
- src/modules/video/services/video-composer.service.ts (103 lines, TODO)
- src/modules/video/services/elevenlabs.service.ts (143 lines, ‚úì WORKING)
- src/modules/video/services/pikalabs.service.ts
- src/modules/video/video.service.ts (172 lines)

RELATED DOCS:
- docs/codebase-summary.md
- docs/code-standards.md
- docs/system-architecture.md
- docs/reports/DOCUMENTATION-ACCURACY-AUDIT.md

================================================================================
‚ö†Ô∏è IMPORTANT NOTES
================================================================================

1. CRITICAL PATH: This implementation unblocks autonomous video generation.
   Without it, the system cannot create final videos ‚Üí cannot publish ‚Üí
   cannot generate revenue. High priority.

2. FFMPEG DEPENDENCY: Requires ffmpeg binary installed on all systems
   (Docker, local dev, production). Installation steps provided in plans.

3. STORAGE CONFIGURATION: Requires S3 bucket + CDN configuration for
   production. Local temp directory for development.

4. TESTING IMPORTANCE: Comprehensive test coverage (80%+) is critical
   due to complexity of video processing. All edge cases must be covered.

5. PHASE DEPENDENCIES: Phases must be completed sequentially:
   Foundation ‚Üí Composition ‚Üí Thumbnails ‚Üí Errors ‚Üí Testing ‚Üí Deployment
   Cannot skip phases or do in parallel.

6. PERFORMANCE MONITORING: Parallel processing of 5 videos requires careful
   monitoring of memory/disk/CPU. Performance testing (Phase 5) is critical.

================================================================================
üéì NEXT STEPS
================================================================================

START IMPLEMENTATION:
1. [ ] Read Executive Summary (5 min) - understand scope
2. [ ] Read Quick Start FFmpeg section (10 min) - understand commands
3. [ ] Install FFmpeg locally: brew install ffmpeg (macOS) or apt-get install ffmpeg (Linux)
4. [ ] Test FFmpeg: ffmpeg -version
5. [ ] Follow Phase 1 checklist in main plan
6. [ ] Create FFmpegService
7. [ ] Write unit tests
8. [ ] Progress through phases 2-6

TRACKING PROGRESS:
- Use TODO checklist in main plan (60+ items)
- Check off each phase milestone
- Track test coverage (target: 80%+)
- Document performance metrics

FOR QUESTIONS:
- Check Quick Start debugging section
- Review main plan risk mitigation section
- Check FFmpeg documentation links
- Review code standards in docs/code-standards.md

================================================================================
‚ú® SUMMARY
================================================================================

A comprehensive, production-ready implementation plan has been created for
FFmpeg-based video composition. The plan covers:

- Complete architecture with 4 new services + 1 updated service
- 6-phase implementation over 7-10 days (20-40 hours)
- FFmpeg command strategies for social media format (1080x1920, 9:16)
- Full testing strategy (85% unit, 70% integration, 60% E2E)
- Error handling, recovery, and graceful degradation
- Security considerations & performance optimization
- Risk mitigation matrix with 7 identified risks
- 60+ actionable TODO tasks
- Complete documentation for developers, architects, & managers

Status: ‚úÖ READY FOR IMPLEMENTATION

Start with: /plans/251101-video-composition-summary.md (Executive Summary)
Then read: /plans/251101-video-composition-ffmpeg-plan.md (Main Plan)
Reference: /plans/FFMPEG-QUICK-START.md (Developer Quick Start)

================================================================================
