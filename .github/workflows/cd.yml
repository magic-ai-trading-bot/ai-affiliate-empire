name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://ai-affiliate-empire-staging.fly.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build application
        run: npm run build

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io (Staging)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config deploy/fly.staging.toml --remote-only

      - name: Run smoke tests on staging
        run: |
          sleep 10 # Wait for deployment to stabilize
          npm run test:smoke:staging
        env:
          STAGING_URL: https://ai-affiliate-empire-staging.fly.dev

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ai-affiliate-empire-staging.fly.dev/health)
          if [ $response -ne 200 ]; then
            echo "‚ùå Health check failed with status code: $response"
            exit 1
          fi
          echo "‚úÖ Health check passed"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚úÖ Staging deployment successful",
              attachments: [{
                color: 'good',
                text: `Deployed commit ${process.env.GITHUB_SHA.substring(0, 7)} to staging`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ùå Staging deployment failed",
              attachments: [{
                color: 'danger',
                text: `Failed to deploy commit ${process.env.GITHUB_SHA.substring(0, 7)} to staging`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    needs: deploy-staging
    environment:
      name: production
      url: https://ai-affiliate-empire.fly.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build application
        run: npm run build

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Backup database
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "Creating database backup..."
          flyctl postgres backup create --app ai-affiliate-empire-db || echo "Backup creation skipped (might not be supported)"

      - name: Deploy to Fly.io (Production)
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --config deploy/fly.production.toml --remote-only --strategy bluegreen

      - name: Run smoke tests on production
        run: |
          sleep 15 # Wait for deployment to stabilize
          npm run test:smoke:production
        env:
          PRODUCTION_URL: https://ai-affiliate-empire.fly.dev

      - name: Health check
        id: health_check
        run: |
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://ai-affiliate-empire.fly.dev/health)
            if [ $response -eq 200 ]; then
              echo "‚úÖ Health check passed on attempt $attempt"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "‚è≥ Health check failed on attempt $attempt, retrying..."
            sleep 10
            attempt=$((attempt + 1))
          done
          echo "‚ùå Health check failed after $max_attempts attempts"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Rollback on failure
        if: failure() && steps.health_check.outputs.success == 'false'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          echo "üîÑ Rolling back deployment..."
          bash ./scripts/rollback.sh production

      - name: Verify rollback
        if: failure() && steps.health_check.outputs.success == 'false'
        run: |
          sleep 10
          response=$(curl -s -o /dev/null -w "%{http_code}" https://ai-affiliate-empire.fly.dev/health)
          if [ $response -ne 200 ]; then
            echo "‚ùå Rollback verification failed"
            exit 1
          fi
          echo "‚úÖ Rollback successful, service is healthy"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üöÄ Production deployment successful",
              attachments: [{
                color: 'good',
                text: `Deployed commit ${process.env.GITHUB_SHA.substring(0, 7)} to production`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üí• Production deployment failed",
              attachments: [{
                color: 'danger',
                text: `Failed to deploy commit ${process.env.GITHUB_SHA.substring(0, 7)} to production. Rollback initiated.`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment record
        if: success()
        run: |
          echo "Recording successful deployment..."
          echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ"),${GITHUB_SHA},production,success" >> deployments.log
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add deployments.log
          git commit -m "chore: record production deployment ${GITHUB_SHA:0:7}" || echo "No changes to commit"

  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: Monitor metrics for 5 minutes
        run: |
          echo "üìä Monitoring deployment metrics..."
          sleep 300 # Monitor for 5 minutes

      - name: Check error rates
        run: |
          # This would integrate with your monitoring service (e.g., Sentry, Datadog)
          echo "Checking error rates..."
          # Example: curl to monitoring API to check error rates

      - name: Alert if anomalies detected
        if: failure()
        run: |
          echo "‚ö†Ô∏è Anomalies detected in post-deployment monitoring"
