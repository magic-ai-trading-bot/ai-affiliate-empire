// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  // Connection pooling configuration for optimal performance
  // Limits: connectionLimit (max connections), poolTimeout (seconds)
  directUrl = env("DIRECT_DATABASE_URL")
}

// Affiliate Networks (Amazon Associates, ShareASale, CJ, etc.)
model AffiliateNetwork {
  id              String   @id @default(cuid())
  name            String   @unique
  apiUrl          String?
  apiKey          String?  // Encrypted
  secretKey       String?  // Encrypted
  commissionRate  Decimal  @default(0) @db.Decimal(5, 2)
  status          NetworkStatus @default(ACTIVE)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  products        Product[]
  analytics       NetworkAnalytics[]

  @@index([status])
}

enum NetworkStatus {
  ACTIVE
  PAUSED
  DISABLED
}

// Products from affiliate networks
model Product {
  id              String   @id @default(cuid())
  asin            String?  @unique // Amazon ASIN
  externalId      String?  // ID from other networks
  title           String
  description     String?  @db.Text
  price           Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  commission      Decimal  @db.Decimal(5, 2)
  commissionType  String   @default("percentage") // percentage or fixed

  affiliateUrl    String
  imageUrl        String?
  category        String?
  brand           String?

  network         AffiliateNetwork @relation(fields: [networkId], references: [id])
  networkId       String

  // AI Scoring
  trendScore      Float    @default(0)
  profitScore     Float    @default(0)
  viralityScore   Float    @default(0)
  overallScore    Float    @default(0)

  status          ProductStatus @default(ACTIVE)
  lastRankedAt    DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  videos          Video[]
  blogs           Blog[]
  analytics       ProductAnalytics[]
  trendCache      TrendCache?

  @@index([status, overallScore])
  @@index([networkId, status])
  @@index([category, status])
}

enum ProductStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  OUT_OF_STOCK
}

// Generated videos
model Video {
  id              String   @id @default(cuid())

  product         Product  @relation(fields: [productId], references: [id])
  productId       String

  title           String
  description     String?  @db.Text
  script          String   @db.Text
  duration        Int      // seconds

  // File locations
  videoUrl        String?
  thumbnailUrl    String?
  voiceUrl        String?

  // Generation metadata
  voiceProvider   String?  // elevenlabs, openai
  videoProvider   String   @default("pikalabs") // pikalabs, runway
  language        String   @default("en")

  // Publishing status
  status          VideoStatus @default(PENDING)
  generatedAt     DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  publications    Publication[]

  @@index([productId, status])
  @@index([status, createdAt])
}

enum VideoStatus {
  PENDING
  GENERATING
  READY
  FAILED
  ARCHIVED
}

// Multi-platform publications
model Publication {
  id              String   @id @default(cuid())

  video           Video    @relation(fields: [videoId], references: [id])
  videoId         String

  platform        Platform
  platformPostId  String?  // YouTube video ID, TikTok ID, etc.
  url             String?

  title           String?
  caption         String?  @db.Text
  hashtags        String?

  status          PublicationStatus @default(PENDING)
  publishedAt     DateTime?
  errorMessage    String?
  retryCount      Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  analytics       PlatformAnalytics[]

  @@index([videoId, platform])
  @@index([platform, status])
  @@index([publishedAt])
}

enum Platform {
  YOUTUBE
  TIKTOK
  INSTAGRAM
  FACEBOOK
  BLOG
}

enum PublicationStatus {
  PENDING
  SCHEDULED
  PUBLISHING
  PUBLISHED
  FAILED
}

// Blog posts
model Blog {
  id              String   @id @default(cuid())

  product         Product  @relation(fields: [productId], references: [id])
  productId       String

  title           String
  slug            String   @unique
  content         String   @db.Text
  excerpt         String?
  category        String?  // Category for content organization

  // SEO
  metaTitle       String?
  metaDescription String?
  keywords        String?

  language        String   @default("en")
  status          BlogStatus @default(DRAFT)

  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([productId, status])
  @@index([status, publishedAt])
  @@index([category, status])
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Analytics for products
model ProductAnalytics {
  id              String   @id @default(cuid())

  product         Product  @relation(fields: [productId], references: [id])
  productId       String

  date            DateTime @db.Date

  // Performance metrics
  views           Int      @default(0)
  clicks          Int      @default(0)
  conversions     Int      @default(0)
  revenue         Decimal  @default(0) @db.Decimal(10, 2)

  // Calculated metrics
  ctr             Float    @default(0) // Click-through rate
  conversionRate  Float    @default(0)
  roi             Float    @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([productId, date])
  @@index([date])
  @@index([productId, date])
}

// Analytics per platform
model PlatformAnalytics {
  id              String   @id @default(cuid())

  publication     Publication @relation(fields: [publicationId], references: [id])
  publicationId   String

  date            DateTime @db.Date

  views           Int      @default(0)
  likes           Int      @default(0)
  comments        Int      @default(0)
  shares          Int      @default(0)
  clicks          Int      @default(0)

  watchTime       Int      @default(0) // seconds
  engagement      Float    @default(0) // engagement rate

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([publicationId, date])
  @@index([publicationId, date])
}

// Analytics per network
model NetworkAnalytics {
  id              String   @id @default(cuid())

  network         AffiliateNetwork @relation(fields: [networkId], references: [id])
  networkId       String

  date            DateTime @db.Date

  totalClicks     Int      @default(0)
  totalConversions Int     @default(0)
  totalRevenue    Decimal  @default(0) @db.Decimal(10, 2)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([networkId, date])
  @@index([networkId, date])
}

// System configuration
model SystemConfig {
  id              String   @id @default(cuid())
  key             String   @unique
  value           String   @db.Text
  description     String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Workflow execution logs
model WorkflowLog {
  id              String   @id @default(cuid())
  workflowId      String
  workflowType    String   // daily_control_loop, weekly_optimization, etc.

  status          WorkflowStatus
  startedAt       DateTime
  completedAt     DateTime?
  duration        Int?     // seconds

  result          String?  @db.Text
  errorMessage    String?  @db.Text

  createdAt       DateTime @default(now())

  @@index([workflowType, startedAt])
  @@index([status, startedAt])
}

enum WorkflowStatus {
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// User authentication
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  passwordHash    String

  firstName       String?
  lastName        String?

  role            UserRole @default(USER)
  status          UserStatus @default(ACTIVE)

  // Token management
  refreshToken    String?  @db.Text
  resetToken      String?
  resetTokenExpiry DateTime?

  lastLoginAt     DateTime?
  emailVerifiedAt DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  apiKeys         ApiKey[]
  auditLogs       AuditLog[]

  @@index([email])
  @@index([username])
  @@index([status, role])
}

enum UserRole {
  ADMIN
  USER
  READONLY
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

// API Keys for programmatic access
model ApiKey {
  id              String   @id @default(cuid())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  name            String   // Description/name for the key
  keyHash         String   @unique // Hashed API key
  keyPrefix       String   // First 8 chars for identification

  permissions     String[] // Array of permission strings

  lastUsedAt      DateTime?
  expiresAt       DateTime?

  status          ApiKeyStatus @default(ACTIVE)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId, status])
  @@index([keyHash])
  @@index([status, expiresAt])
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

// Audit logging for security
model AuditLog {
  id              String   @id @default(cuid())

  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?

  action          String   // login, logout, api_call, etc.
  resource        String?  // Resource being accessed
  method          String?  // HTTP method or operation

  ipAddress       String?
  userAgent       String?  @db.Text

  status          String   // success, failure
  errorMessage    String?  @db.Text

  metadata        String?  @db.Text // JSON string for additional data

  createdAt       DateTime @default(now())

  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@index([status, createdAt])
}

// ============================================================================
// COST TRACKING & BUDGET MANAGEMENT
// ============================================================================

// Cost tracking entry - granular record of each cost-incurring operation
model CostEntry {
  id              String   @id @default(cuid())

  // Cost details
  service         CostService  // OPENAI, CLAUDE, ELEVENLABS, PIKA, DALLE, S3, DATABASE, COMPUTE
  operation       String       // e.g., "gpt-4-completion", "elevenlabs-tts", "s3-storage"
  amount          Decimal  @db.Decimal(10, 4)  // Cost in USD
  currency        String   @default("USD")

  // Usage metrics
  tokens          Int?         // For AI APIs (input + output tokens)
  inputTokens     Int?         // Input tokens (for AI APIs)
  outputTokens    Int?         // Output tokens (for AI APIs)
  duration        Int?         // Duration in seconds (for voice, video)
  storageBytes    BigInt?      // Storage size (for S3, DB)
  computeMinutes  Int?         // Compute time (for Fly.io, Temporal)

  // Context
  resourceId      String?      // Video ID, Product ID, etc.
  resourceType    String?      // VIDEO, BLOG, PRODUCT
  metadata        Json?        // Additional context

  // Provider details
  provider        String       // openai, anthropic, elevenlabs, etc.
  model           String?      // gpt-4, claude-3.5-sonnet, etc.

  // Timestamps
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([service, timestamp])
  @@index([timestamp])
  @@index([resourceId, resourceType])
  @@index([provider, model])
}

enum CostService {
  OPENAI
  CLAUDE
  ELEVENLABS
  PIKA
  DALLE
  S3
  DATABASE
  COMPUTE
  OTHER
}

// Aggregated daily costs
model DailyCostSummary {
  id              String   @id @default(cuid())

  date            DateTime @db.Date

  // Service breakdowns
  openaiCost      Decimal  @default(0) @db.Decimal(10, 2)
  claudeCost      Decimal  @default(0) @db.Decimal(10, 2)
  elevenlabsCost  Decimal  @default(0) @db.Decimal(10, 2)
  pikaCost        Decimal  @default(0) @db.Decimal(10, 2)
  dalleCost       Decimal  @default(0) @db.Decimal(10, 2)
  storageCost     Decimal  @default(0) @db.Decimal(10, 2)
  databaseCost    Decimal  @default(0) @db.Decimal(10, 2)
  computeCost     Decimal  @default(0) @db.Decimal(10, 2)
  otherCost       Decimal  @default(0) @db.Decimal(10, 2)

  totalCost       Decimal  @default(0) @db.Decimal(10, 2)

  // Usage metrics
  totalTokens     Int      @default(0)
  totalDuration   Int      @default(0)
  totalStorage    BigInt   @default(0)
  totalCompute    Int      @default(0)

  // Content metrics
  videosGenerated Int      @default(0)
  blogsGenerated  Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([date])
  @@index([date])
}

// Budget configuration
model BudgetConfig {
  id              String   @id @default(cuid())

  // Budget limits
  monthlyLimit    Decimal  @db.Decimal(10, 2)  // $412
  dailyLimit      Decimal  @db.Decimal(10, 2)  // ~$14

  // Alert thresholds (percentage)
  warningThreshold   Int   @default(80)   // 80%
  criticalThreshold  Int   @default(100)  // 100%
  emergencyThreshold Int   @default(150)  // 150%

  // Alert channels
  emailAlerts     Boolean  @default(true)
  slackAlerts     Boolean  @default(false)
  emailRecipients String[] // Array of email addresses

  // Slack configuration
  slackWebhookUrl String?  @db.Text

  // Auto-actions
  autoScaleDown   Boolean  @default(true)   // Reduce content generation
  emergencyStop   Boolean  @default(true)   // Kill workflows at 150%

  // Current period
  periodStart     DateTime
  periodEnd       DateTime

  isActive        Boolean  @default(true)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
}

// Budget alert log
model BudgetAlert {
  id              String   @id @default(cuid())

  level           AlertLevel   // WARNING, CRITICAL, EMERGENCY
  threshold       Int          // Percentage threshold hit
  currentSpend    Decimal  @db.Decimal(10, 2)
  budgetLimit     Decimal  @db.Decimal(10, 2)
  percentUsed     Int          // 0-200+

  message         String   @db.Text

  // Actions taken
  actionsTaken    Json?        // Array of actions executed

  // Notification status
  emailSent       Boolean  @default(false)
  slackSent       Boolean  @default(false)
  notificationError String?  @db.Text

  // Context
  periodStart     DateTime
  periodEnd       DateTime

  createdAt       DateTime @default(now())

  @@index([level, createdAt])
  @@index([createdAt])
}

enum AlertLevel {
  WARNING
  CRITICAL
  EMERGENCY
}

// Cost optimization recommendations
model CostOptimization {
  id              String   @id @default(cuid())

  type            OptimizationType
  priority        Priority             // HIGH, MEDIUM, LOW

  title           String
  description     String   @db.Text

  // Impact estimation
  currentCost     Decimal  @db.Decimal(10, 2)
  estimatedSavings Decimal @db.Decimal(10, 2)
  savingsPercent  Int                  // 0-100

  // Recommendation
  recommendation  String   @db.Text
  implementation  String?  @db.Text     // Steps to implement

  // Status
  status          OptimizationStatus   // PENDING, APPLIED, REJECTED, EXPIRED
  appliedAt       DateTime?
  appliedBy       String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status, priority])
  @@index([createdAt])
}

enum OptimizationType {
  MODEL_SELECTION      // Use cheaper AI models
  BATCH_PROCESSING     // Batch requests to reduce overhead
  CACHE_OPTIMIZATION   // Increase caching to reduce API calls
  RATE_LIMITING        // Reduce generation rate
  RESOURCE_CLEANUP     // Delete unused resources
  PROVIDER_SWITCH      // Switch to cheaper provider
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum OptimizationStatus {
  PENDING
  APPLIED
  REJECTED
  EXPIRED
}

// ============================================================================
// NEWSLETTER SUBSCRIPTION SYSTEM
// ============================================================================

// Newsletter subscribers with double opt-in
model NewsletterSubscriber {
  id              String   @id @default(cuid())

  email           String   @unique

  // Subscription details
  status          SubscriptionStatus @default(PENDING)
  confirmedAt     DateTime?
  unsubscribedAt  DateTime?

  // Double opt-in token
  confirmToken    String?  @unique
  confirmTokenExpiry DateTime?

  // Unsubscribe token
  unsubscribeToken String  @unique @default(cuid())

  // Source tracking
  source          String?  // modal, inline-form, footer, etc.
  referrer        String?  // URL where they subscribed
  ipAddress       String?
  userAgent       String?  @db.Text

  // Preferences
  language        String   @default("en")
  frequency       EmailFrequency @default(WEEKLY)

  // Engagement tracking
  emailsSent      Int      @default(0)
  emailsOpened    Int      @default(0)
  emailsClicked   Int      @default(0)
  lastEmailSentAt DateTime?
  lastOpenedAt    DateTime?
  lastClickedAt   DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([email])
  @@index([status, createdAt])
  @@index([confirmToken])
  @@index([unsubscribeToken])
}

enum SubscriptionStatus {
  PENDING      // Awaiting email confirmation
  CONFIRMED    // Active subscriber
  UNSUBSCRIBED // User unsubscribed
  BOUNCED      // Email bounced
  COMPLAINED   // Spam complaint
}

enum EmailFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

// Newsletter campaign tracking
model NewsletterCampaign {
  id              String   @id @default(cuid())

  name            String
  subject         String
  content         String   @db.Text

  // Scheduling
  status          CampaignStatus @default(DRAFT)
  scheduledAt     DateTime?
  sentAt          DateTime?

  // Targeting
  targetStatus    SubscriptionStatus[] // Which subscriber statuses to target
  targetLanguage  String?

  // Analytics
  recipientCount  Int      @default(0)
  openCount       Int      @default(0)
  clickCount      Int      @default(0)
  unsubscribeCount Int     @default(0)
  bounceCount     Int      @default(0)

  // Rates (calculated)
  openRate        Float    @default(0)
  clickRate       Float    @default(0)
  unsubscribeRate Float    @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([status, scheduledAt])
  @@index([sentAt])
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

// ============================================================================
// TREND DATA INTEGRATION
// ============================================================================

// Trend cache for product ranking
model TrendCache {
  id              String   @id @default(cuid())
  productId       String   @unique
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Trend data (all 0-1 normalized)
  googleTrendScore Float   @default(0)
  twitterScore    Float    @default(0)
  redditScore     Float    @default(0)
  tiktokScore     Float    @default(0)

  // Metadata
  source          String[] // ['google', 'twitter', 'reddit', 'tiktok']
  lastUpdated     DateTime
  nextUpdateAt    DateTime // Scheduled next refresh

  // Error tracking
  failedSources   String[] // Sources that failed
  errorCount      Int      @default(0)
  lastError       String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([nextUpdateAt])  // For finding stale cache
}

// Trend data source configuration
model TrendDataSource {
  id              String   @id @default(cuid())
  name            String   @unique // 'google', 'twitter', 'reddit', 'tiktok'
  enabled         Boolean  @default(true)
  apiKey          String?  // Encrypted

  // Rate limiting
  dailyLimit      Int      @default(1000)
  dailyUsed       Int      @default(0)
  requestsPerMin  Int      @default(60)

  // Caching
  cacheTTLHours   Int      @default(12)  // 12-24 hours
  lastSyncAt      DateTime?

  // Status
  status          String   @default("active")  // active, paused, error
  errorMessage    String?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([enabled, status])
}
